#!/bin/sh
exec 0</dev/console
exec 1>/dev/console
exec 2>/dev/console

echo "Starting NDR"

# Mount the necessities
mount -t proc none /proc
mount -t sysfs none /sys

# Start udev
UDEV_BIN=/sbin/udevd
test -x $UDEV_BIN || exit 5

clear

# Load in our brain
. /etc/image.config
. /build.time

# Check for config file and read it
UDEV_CONFIG=/etc/udev/udev.conf
test -r $UDEV_CONFIG || exit 6
. $UDEV_CONFIG

printf '\000\000\000\000' > /proc/sys/kernel/hotplug
$UDEV_BIN -d || (echo "FAIL" && exit 1)
udevadm trigger --type=subsystems --action=add
udevadm trigger --type=devices --action=add
udevadm settle --timeout=30 || echo "udevadm settle failed"

mkdir /persistant
#mount -o noatime,nodev,nosuid,noexec /dev/disk/by-partlabel/ndr-persistant /persistant
mount -o noatime /dev/disk/by-partlabel/ndr-persistant /persistant

mount -t proc none /proc
mount -t sysfs none /sys

# Load the network configuration
ndr-network-apply --oneshot

function run_ota() {
    # We attempt to OTA on each boot to see if there's a new root filesystem or similar
    #
    # Although Secure Boot will prevent us from starting a kernel that is unsigned, it
    # would prevent the system from booting. As such we'll download a signed message
    # with a manifest (and possibly other commands) that have variables that tell us
    # if the image is newer or older

    #udhcpc -i $ETHERNET_DEVICE
    ntpdate time.nist.gov

    if [ $? -ne 0 ]; then
        echo "OTA BAILING OUT: udhcpc failed"
        return
    fi

    # Download the OTA runner
    curl -o /persistant/ota.timestamp $OTA_TIMESTAMP
    if [ $? -ne 0 ]; then
        echo "curl failed to download manfiest, bailing out"
        return
    fi

    # FIXME: This is where OpenSSL verification needs to happen
    UPDATE_IMAGE_BUILDTIME=`cat /persistant/ota.timestamp`

    if [ $CURRENT_IMAGE_BUILDTIME -ge $UPDATE_IMAGE_BUILDTIME ]; then
        echo "Existing image $CURRENT_IMAGE_BUILDTIME is up-to-date."
        return
    fi

    echo "Updating to $UPDATE_IMAGE_BUILDTIME"
    mkdir -p /persistant/ota
    curl -o /persistant/ota/rootfs.img.bz2 $ROOTFS_IMAGE
    if [ $? -ne 0 ]; then
        echo "Failed to download rootfs. Bailing out of OTA"
        return
    fi

    curl -o /persistant/ota/bootx64.efi $BOOT0_IMAGE
    if [ $? -ne 0 ]; then
        echo "Failed to download updated kernel. Bailing out of OTA"
        return
    fi

    # FIXME: Check hashes here
    mkdir /ESP
    mount $ESP_PART /ESP

    if [ $? -ne 0 ]; then
        echo "Failed to mount ESP partition. Bailing out"
        return
    fi

    cp /persistant/ota/bootx64.efi /ESP/EFI/boot/
    umount /ESP
    echo "Installed updated kernel"

    echo "Writing root partition"
    bzcat /persistant/ota/rootfs.img.bz2 | dd of=$ROOT_PART
    echo "Ready to reboot"
    sync

    # So for reasons I can't figure out, reboot doesn't work when PID 1 is a shell script
    # so we're going to intentionally cause a kernel panic by killing init, and wait for
    # kernel panic reboot handler to reboot us. Yay for voodoo.

    exec reboot
}

echo "Running OTA Process"
run_ota

echo "Switching to rootfs"
. /root.hash
veritysetup create ndr-dm-rootfs /dev/disk/by-partlabel/ndr-rootfs ./hash.block $ROOT_HASH

if [ $? -ne 0 ]; then
    echo "Verity verification FAILED! Forcing OTA"
    CURRENT_IMAGE_BUILDTIME=0
    run_ota
fi

umount /persistant
mkdir -p /root/persistant
mount -o noatime /dev/disk/by-partlabel/ndr-persistant /root/persistant

mkdir /rootfs
mount -o ro,noatime /dev/mapper/ndr-dm-rootfs /rootfs

mkdir -p /root/persistant/overlay
mkdir -p /root/overlay

mount -t aufs -o noatime,br=/root/persistant/overlay=rw:/rootfs=ro none /root/overlay
mount -o bind /root/persistant /root/overlay/persistant
exec switch_root /root/overlay /sbin/init
